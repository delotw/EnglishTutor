import asyncio
import os
from common.states_classes import Reg, CheckMail, CheckEssay, SolveTasksCategory
from features.chatgpt.chatgpt_func import get_score_37, get_score_38
from features.mistral.mistral_func import get_info_from_photo
from features.database.db_functions import *
from modules.keyboards.get_funcs.inline import *
from modules.keyboards.get_funcs.reply import *
from modules.bot.main import bot
from aiogram import F, Router
from aiogram.types import CallbackQuery, Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from loguru import logger


# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_router = Router()
mark_down = ParseMode.MARKDOWN


@user_router.message(F.text == '/start')
async def send_welcome(message: Message):
    if await check_user_exists(uid=message.from_user.id):
        text = (f"<b>–ü—Ä–∏–≤–µ—Ç, {await get_user_name(uid=message.from_user.id)} üëã</b> \n–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:")
        kbd = await get_inline(
            btns={
                "–¢–∏–ø–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è üìã": "choose_tamplate_tasks",
                "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∏—Å—å–º–æ üìù": "choose_essay",
                "–ü—Ä–æ—Ñ–∏–ª—å ‚ÑπÔ∏è": "profile",
                "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚òéÔ∏è": "support",
            },
            sizes=(1, 1, 1,)
        )
        await message.answer(text=text, reply_markup=kbd)
    else:
        text = ('–ü—Ä–∏–≤–µ—Ç üëã, –º–µ–Ω—è –∑–æ–≤—É—Ç <b>–¢—å—é—Ç–æ—Ä</b>! \n–ü—Ä–æ–ø–∏—à–∏ /reg –¥–ª—è —Ä–µ–≥–∏—Å—Ç–∞—Ä—Ü–∏–∏!')
        await message.answer(text=text)


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–æ—Ç–µ
@user_router.message(F.text == '/reg')
async def reg_first(message: Message, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.delete()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    text = '1Ô∏è‚É£: –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?'
    bot_message = await message.answer(text=text)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
    await state.update_data(bot_message_id=bot_message.message_id)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(Reg.name)


@user_router.message(Reg.name)
async def reg_second(message: Message, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.delete()

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    data = await state.get_data()
    bot_message_id = data.get("bot_message_id")
    if bot_message_id:
        await message.bot.delete_message(chat_id=message.chat.id, message_id=bot_message_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(name=message.text)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = f'2Ô∏è‚É£: {message.text}, –≤ –∫–∞–∫–æ–º –∫–ª–∞—Å—Å–µ —Ç—ã —É—á–∏—à—å—Å—è?'
    kbd = await get_reply(
        '–ü—Ä–æ–≥—É–ª–∏–≤–∞—é—Å—å –º–∏–º–æ üö∂',
        '10',
        '11',
        sizes=(3,)
    )
    bot_message = await message.answer(text=text, reply_markup=kbd)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.update_data(bot_message_id=bot_message.message_id)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(Reg.grade)


@user_router.message(Reg.grade)
async def reg_third(message: Message, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.delete()

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    data = await state.get_data()
    bot_message_id = data.get("bot_message_id")
    if bot_message_id:
        await message.bot.delete_message(chat_id=message.chat.id, message_id=bot_message_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞—Å—Å
    await state.update_data(grade=message.text)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = '3Ô∏è‚É£: –ö–∞–∫ –º–Ω–µ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?'
    kbd = await get_reply(
        '–ì–æ—Å–ø–æ–¥–∏–Ω ü§µ‚Äç‚ôÇÔ∏è',
        '–ì–æ—Å–ø–æ–∂–∞ ü§µ‚Äç‚ôÄÔ∏è',
        sizes=(2,)
    )
    bot_message = await message.answer(text=text, reply_markup=kbd)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.update_data(bot_message_id=bot_message.message_id)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(Reg.sex)


@user_router.message(Reg.sex)
async def reg_final(message: Message, state: FSMContext):
    await message.delete()

    data = await state.get_data()
    bot_message_id = data.get("bot_message_id")
    if bot_message_id:
        await message.bot.delete_message(chat_id=message.chat.id, message_id=bot_message_id)

    await state.update_data(sex=message.text)
    data = await state.get_data()
    uid = message.from_user.id
    name = str(data["name"])
    grade = data["grade"]
    sex = str(data["sex"])
    await create_user(uid=uid, name=name, grade=grade, sex=sex)

    text = ('üéâ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–∫–æ–Ω—á–µ–Ω–∞, —è —Ä–∞–¥, —á—Ç–æ –º—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –ø–æ–±–ª–∏–∂–µ.</b> \n'
            '–í –∫–∞—á–µ—Å—Ç–≤–µ <b>–ø–æ–¥–∞—Ä–∫–∞</b> —Ç–µ–±–µ –∑–∞–∫–∏–Ω—É–ª –Ω–µ–º–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞, —á—Ç–æ–±—ã —Ç—ã –º–æ–≥ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—à—É –ø—Ä–æ–≤–µ—Ä–∫—É –ø–∏—Å–µ–º –Ω–µ–π—Ä–æ–Ω–∫–æ–π.\n'
            '----------')
    text_1 = "‚û°Ô∏è –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!"
    kbd = await get_inline(
        btns={
            '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚úÖ': 'main_menu',
        },
        sizes=(1,)
    )

    bot_message_1 = await message.answer(text=text, reply_markup=ReplyKeyboardRemove())
    await message.answer(text=text_1, reply_markup=kbd)
    await state.update_data(bot_message_ids=[bot_message_1.message_id])
    await asyncio.sleep(10)
    for message_id in [bot_message_1.message_id]:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=message_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


# * –û—Å–Ω–æ–≤–Ω—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è –º–µ–Ω—é


@user_router.callback_query(F.data == "main_menu")
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()  # —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    text = (f"<b>–ü—Ä–∏–≤–µ—Ç, {await get_user_name(uid=callback.from_user.id)} üëã</b> \n–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:")
    kbd = await get_inline(
        btns={
            "–¢–∏–ø–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è üìã": "choose_tamplate_tasks",
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∏—Å—å–º–æ üìù": "choose_essay",
            "–ü—Ä–æ—Ñ–∏–ª—å ‚ÑπÔ∏è": "profile",
            "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚òéÔ∏è": "support",
        },
        sizes=(1, 1, 1,)
    )
    await callback.message.edit_text(text=text, reply_markup=kbd)
    await callback.answer()


@user_router.callback_query(F.data == "profile")
async def menu_user_profile(callback: CallbackQuery):
    uid = callback.from_user.id
    user = await get_user(uid=uid)
    temp = get_percentage(right=user["right_solved"], solved=user["solved"])
    text = (
        '<b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b> üòÄ \n'
        '----------\n'
        f'<b>–ò–º—è</b>: {user["name"]}\n'
        f'<b>–ë–∞–ª–∞–Ω—Å</b>: {user["balance"]} —Ä—É–±.\n'
        f'<b>–ö–ª–∞—Å—Å</b>: {user["grade"]}\n'
        f'<b>–†–µ—à–µ–Ω–æ –≤–µ—Ä–Ω–æ</b>: {user["right_solved"]} ({temp}%)\n'
    )
    kbd = await get_inline(
        btns={
            '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å üí∞': 'deposit',
            '‚¨ÖÔ∏è –ù–∞–∑–∞–¥': 'main_menu',
        },
        sizes=(1, 1,)
    )
    await callback.message.edit_text(text=text, reply_markup=kbd)
    await callback.answer()


@user_router.callback_query(F.data == "support")
async def menu_support(callback: CallbackQuery):
    text = (f"–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ @delotbtw")
    kbd = await get_inline(
        btns={
            "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é": "main_menu",
        },
        sizes=(1,)
    )
    await callback.message.edit_text(text=text, reply_markup=kbd)
    await callback.answer()


@user_router.callback_query(F.data == "choose_tamplate_tasks")
async def menu_template_tasks(callback: CallbackQuery):
    text = ("‚¨áÔ∏è –ß–∞—Å—Ç—å —ç–∫–∑–∞–º–µ–Ω–∞")
    kbd = await get_inline(
        btns={
            "–ê—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ üéß": "part_audio",
            "–ß—Ç–µ–Ω–∏–µ üìñ": "part_reading",
            "–õ–µ–∫—Å–∏–∫–∞ –∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞ üìö": "part_grammar",
            "–ü–∏—Å—å–º–æ ‚úçÔ∏è": "part_mail",
            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥": "main_menu",
        },
        sizes=(2, 2, 1,)
    )
    await callback.message.edit_text(text=text, reply_markup=kbd)
    await callback.answer()


@user_router.callback_query(F.data == "choose_essay")
async def menu_check_mail(callback: CallbackQuery, state: FSMContext):
    await state.clear()  # –æ—Ç—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∏—Å—å–º–∞
    text = ("–£—Ö —Ç—ã, —É–∂–µ –µ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç? –ö—Ä—É—Ç–æ! \n–ö–∞–∫–æ–π —Ç–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–±–µ—Ä–µ—à—å?")
    kbd = await get_inline(
        btns={
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é ü§ñ": "check_by_ai",
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–º üë®‚Äçüè´": "check_by_expert",
            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥": "main_menu",
        },
        sizes=(1, 1, 1,)
    )
    await callback.message.edit_text(text=text, reply_markup=kbd)
    await callback.answer()


@user_router.callback_query(F.data == "check_by_ai")
async def check_by_ai(callback: CallbackQuery, state: FSMContext):
    await state.set_state(CheckMail.check_type)
    await state.update_data(check_type='ai')
    text = ("‚¨áÔ∏è –í—ã–±–µ—Ä–∏ –∑–∞–¥–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å ")
    kbd = await get_inline(
        btns={
            '37': 'choice_37_ai',
            '38': 'choice_38_ai',
            '–ù–∞–∑–∞–¥': 'choose_essay',
        },
        sizes=(2, 1,)
    )
    await callback.message.edit_text(text=text, reply_markup=kbd)
    await callback.answer()


# * –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç—Å—Å–µ –∏–∑ –∑–∞–¥–∞–Ω–∏—è 38
@user_router.callback_query(F.data == 'choice_38_ai')
async def choice_38_ai(callback: CallbackQuery, state: FSMContext):
    await state.set_state(CheckEssay.check_type)
    await state.update_data(task_type='ai')
    text = ('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–π –ø–æ–∫—É–ø–∫—É –Ω–∏–∂–µ –∏ –º—ã –Ω–∞—á–∏–∞–Ω–µ–º üí•')
    kbd = await get_inline(
        btns={
            '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é ‚úÖ': 'confirm_ai_38',
            '–û—Ç–º–µ–Ω–∞ ‚ùå': 'choose_essay',
        },
    )
    await callback.message.edit_text(text=text, reply_markup=kbd)
    await callback.answer()


@user_router.callback_query(F.data == 'confirm_ai_38')
async def confirm_check_38_ai(callback: CallbackQuery, state: FSMContext):
    user = await get_user(uid=callback.from_user.id)
    if int(user["balance"]) >= 49:
        await state.set_state(CheckEssay.confirmed)
        await state.update_data(confirmed='confirmed')
        await state.set_state(CheckEssay.send_photo)
        await debit_money(uid=callback.from_user.id, amount=49)
        text = ('–î–µ–Ω—å–≥–∏ —Å–ø–∏—Å–∞–Ω—ã —Å –±–∞–ª–∞–Ω—Å–∞! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –∑–∞–¥–∞–Ω–∏–µ–º 38.1 –∏–ª–∏ 38.2 –∏ –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–æ–π. –ü—Ä–∏–º–µ—Ä - https://share.cleanshot.com/X1J421Nf')
        await callback.message.edit_text(text=text)
        await callback.answer()
    else:
        text = (f'‚ùó <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b> –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: {user["balance"]}\n'
                '–ü–µ—Ä–µ—Ö–æ–¥–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —á—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –≤ –ü—Ä–æ—Ñ–∏–ª–µ')
        kbd = await get_inline(
            btns={
                '‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é': 'main_menu',
            },
            sizes=(1, )
        )
        await callback.message.edit_text(text=text, reply_markup=kbd)


@user_router.message(F.photo, CheckEssay.send_photo)
async def get_photo_info(message: Message, state: FSMContext):
    await state.set_state(CheckEssay.info_from_photo)
    photo = message.photo[-1]  # type: ignore
    file_info = await bot.get_file(photo.file_id)
    file_path = os.path.join("photos", f"{photo.file_id}.jpg")
    await bot.download_file(file_info.file_path, destination=file_path)
    photo_path = f'./{file_path}'
    info_from_photo = await get_info_from_photo(photo_path=photo_path)
    await state.update_data(info_from_photo=info_from_photo)
    await state.set_state(CheckEssay.photo_path)
    await state.update_data(photo_path=photo_path)
    text = ('–Ø –ø–æ–ª—É—á–∏–ª –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª —Ç–≤–æ–∏ —Ñ–æ—Ç–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–π –º–Ω–µ —ç—Å—Å–µ!')
    await state.set_state(CheckEssay.send_essay)
    await message.answer(text=text)


@user_router.message(F.text, CheckEssay.send_essay)
async def check_essay(message: Message, state: FSMContext):
    mail_text = message.text
    data = await state.get_data()
    info_from_photo = data["info_from_photo"]

    chatgpt_answer = await get_score_38(mail_text=mail_text, info_from_photo=info_from_photo)
    clear_asnwer = chatgpt_answer.replace('**', '')

    text = (f'<b>–û—Ü–µ–Ω–∫–∞ —Ç–≤–æ–µ–≥–æ —ç—Å—Å–µ:</b> ‚§µÔ∏è \n---------- \n<blockquote>{clear_asnwer}</blockquote> \n')
    text_1 = '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?'
    kbd = await get_inline(
        btns={
            '‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é': 'main_menu',
        },
        sizes=(1, )
    )
    await message.answer(text=text)
    await message.answer(text=text_1, reply_markup=kbd)


# * –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π 37 –∑–∞–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ CHATGPT
@user_router.callback_query(F.data == 'choice_37_ai')
async def confirm_check_37_ai(callback: CallbackQuery, state: FSMContext):
    await state.set_state(CheckMail.task_type)
    await state.update_data(task_type='mail')
    text = ('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–π –ø–æ–∫—É–ø–∫–∏ –Ω–∏–∂–µ –∏ –º—ã –Ω–∞—á–∏–∞–Ω–µ–º üí•')
    kbd = await get_inline(
        btns={
            '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é ‚úÖ': 'confirm_ai_37',
            '–û—Ç–º–µ–Ω–∞ ‚ùå': 'choose_essay',
        },
    )
    await callback.message.edit_text(text=text, reply_markup=kbd)
    await callback.answer()


@user_router.callback_query(F.data == 'confirm_ai_37')
async def check_37(callback: CallbackQuery, state: FSMContext):
    user = await get_user(uid=callback.from_user.id)

    if int(user["balance"]) >= 49:
        await state.set_state(CheckMail.confirmed)
        await state.update_data(confirmed='1')
        await debit_money(uid=callback.from_user.id, amount=49)
        text = ('–û–∫–µ–π, –¥–µ–Ω—å–≥–∏ —Å –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω—ã. \n–û—Ç–ø—Ä–∞–≤–ª—è–π –º–Ω–µ –ø–∏—Å—å–º–æ.')
        await callback.message.answer(text=text)
    else:
        text = (f'‚ùó <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b> –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: {user["balance"]}\n'
                '–ü–µ—Ä–µ—Ö–æ–¥–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —á—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –≤ –ü—Ä–æ—Ñ–∏–ª–µ')
        kbd = await get_inline(
            btns={
                '‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é': 'main_menu',
            },
            sizes=(1, )
        )
        await callback.message.edit_text(text=text, reply_markup=kbd)
    await callback.answer()


@user_router.message(CheckMail.confirmed, F.text)
async def get_ai_score_37(message: Message, state: FSMContext):
    chatgpt_answer = await get_score_37(mail_text=message.text)
    clear_asnwer = chatgpt_answer.replace('**', '')
    text = (f'<b>–û—Ü–µ–Ω–∫–∞ —Ç–≤–æ–µ–≥–æ –ø–∏—Å—å–º–∞:</b> ‚§µÔ∏è \n---------- \n<blockquote>{clear_asnwer}</blockquote> \n')
    text_1 = '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?'
    kbd = await get_inline(
        btns={
            '‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é': 'main_menu',
        },
        sizes=(1, )
    )

    await state.set_state(CheckMail.check_done)
    await state.update_data(check_done='1')
    await insert_ai_mail_check(
        uid=message.from_user.id,
        type='mail',
        content=message.text,
        score=clear_asnwer,
        status=1
    )
    await message.answer(text=text)
    await message.answer(text=text_1, reply_markup=kbd)


# * –¢–∏–ø–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
@user_router.callback_query(F.data == 'part_audio')
async def choice_audio_div(callback: CallbackQuery, state: FSMContext):
    text = '–•–æ—Ä–æ—à–æ, –≤—ã–±–µ—Ä–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ:'
    await state.set_state(SolveTasksCategory.audio)
    kbd = await get_inline(
        btns={
            '–ü–æ–Ω–∏–º–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è (1)': 'audio@main_content',
            'True, false, not stated (2)': 'audio@TFNS_search',
            '–ü–æ–ª–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ä–µ—á–∏ (3-9)': 'audio@full_understanding',
            '–ù–∞–∑–∞–¥': 'choose_tamplate_tasks',
        },
        sizes=(1, 1, 1, 1,)
    )
    await callback.message.edit_text(text=text, reply_markup=kbd)
    await callback.answer()


@user_router.callback_query(F.data.startswith('new@'), SolveTasksCategory.audio)
@user_router.callback_query(F.data.startswith('audio@'), SolveTasksCategory.audio)
async def send_audio_task(callback: CallbackQuery):
    await callback.message.delete()
    category = str(callback.data.split('@')[-1])
    task = await get_random_task(type=category)
    text = (
        f'<b>–ó–∞–¥–∞–Ω–∏–µ {task["id"]}</b> \n'
        '---------- \n'
        f'<blockquote>{task["descr"]}</blockquote>\n'
        f'<b>–°—Å—ã–ª–∫–∞ –Ω–∞ –∞—É–¥–∏–æ:</b> {task["descr_url"]} \n'
        f'<b>–û—Ç–≤–µ—Ç:</b> <tg-spoiler>{task["ans"]}</tg-spoiler>'
    )
    kbd = await get_inline(
        btns={
            '‚úÖ': 'right',
            '‚ùå': 'wrong',
            '–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ üÜï': f'new@{category}',
            '–ù–∞–∑–∞–¥': 'part_audio',
        },
        sizes=(2, 1, 1,)
    )
    await callback.message.answer(text=text, reply_markup=kbd)
    await callback.answer()


# * –¢–∏–ø–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ: —á—Ç–µ–Ω–∏–µ
@user_router.callback_query(F.data == 'part_reading')
async def choice_reading_div(callback: CallbackQuery, state: FSMContext):
    text = '–•–æ—Ä–æ—à–æ, –≤—ã–±–µ—Ä–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ:'
    kbd = await get_inline(
        btns={
            '–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫-—Ç–µ–∫—Å—Ç (10)': 'reading@match',
            '–í—Å—Ç–∞–≤–∫–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –≤ —Ç–µ–∫—Å—Ç (11)': 'reading@insert',
            '–¢–µ–∫—Å—Ç –∏ 1 –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ 4 (12-18)': 'reading@choice_right',
            '–ù–∞–∑–∞–¥': 'choose_tamplate_tasks',
        },
        sizes=(1, 1, 1, 1,)
    )
    await state.set_state(SolveTasksCategory.reading)
    await callback.message.edit_text(text=text, reply_markup=kbd)
    await callback.answer()


@user_router.callback_query(F.data.startswith('new@'), SolveTasksCategory.reading)
@user_router.callback_query(F.data.startswith('reading@'), SolveTasksCategory.reading)
async def send_reading_task(callback: CallbackQuery):
    await callback.message.delete()
    category = str(callback.data.split('@')[-1])
    print(category)
    task = await get_random_task(type=category)
    text = (
        f'<b>–ó–∞–¥–∞–Ω–∏–µ {task["id"]}</b> \n'
        '---------- \n'
        f'<blockquote>{task["descr"]}</blockquote>\n'
        f'<b>–û—Ç–≤–µ—Ç:</b> <tg-spoiler>{task["ans"]}</tg-spoiler>'
    )
    kbd = await get_inline(
        btns={
            '‚úÖ': 'right',
            '‚ùå': 'wrong',
            '–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ üÜï': f'new@{category}',
            '–ù–∞–∑–∞–¥': 'part_reading',
        },
        sizes=(2, 1, 1,)
    )
    await callback.message.answer(text=text, reply_markup=kbd)
    await callback.answer()


# * –¢–∏–ø–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –ª–µ–∫—Å–∏–∫–∞ –∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞
@user_router.callback_query(F.data == 'part_grammar')
async def choice_grammar_div(callback: CallbackQuery, state: FSMContext):
    text = '–•–æ—Ä–æ—à–æ, –≤—ã–±–µ—Ä–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ:'
    kbd = await get_inline(
        btns={
            '–ì—Ä–∞–º–º–∞—Ç–∏–∫–∞ —Å–ª–æ–≤ (19-24)': 'grammar@grammar',
            '–ì—Ä–∞–º–º–∞—Ç–∏–∫–∞ –∏ –ª–µ–∫—Å–∏–∫–∞ —Å–ª–æ–≤ (25-36)': 'grammar@vocabulary',
            '–ù–∞–∑–∞–¥': 'choose_tamplate_tasks',
        },
        sizes=(1, 1, 1,)
    )
    await state.set_state(SolveTasksCategory.grammar)
    await callback.message.edit_text(text=text, reply_markup=kbd)
    await callback.answer()


@user_router.callback_query(F.data.startswith('new@'), SolveTasksCategory.grammar)
@user_router.callback_query(F.data.startswith('grammar@'), SolveTasksCategory.grammar)
async def send_grammar_task(callback: CallbackQuery):
    await callback.message.delete()
    category = str(callback.data.split('@')[-1])
    task = await get_random_task(type=category)
    text = (
        f'<b>–ó–∞–¥–∞–Ω–∏–µ {task["id"]}</b> \n'
        '---------- \n'
        f'<blockquote>{task["descr"]}</blockquote>\n'
        f'<b>–û—Ç–≤–µ—Ç:</b> <tg-spoiler>{task["ans"]}</tg-spoiler>'
    )
    kbd = await get_inline(
        btns={
            '‚úÖ': 'right',
            '‚ùå': 'wrong',
            '–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ üÜï': f'new@{category}',
            '–ù–∞–∑–∞–¥': 'part_grammar',
        },
        sizes=(2, 1, 1,)
    )
    await callback.message.answer(text=text, reply_markup=kbd)
    await callback.answer()


# * –¢–∏–ø–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –ø–∏—Å—å–º–æ/—ç—Å—Å–µ
@user_router.callback_query(F.data == 'part_mail')
async def choice_mail_div(callback: CallbackQuery, state: FSMContext):
    text = '–•–æ—Ä–æ—à–æ, –≤—ã–±–µ—Ä–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ:'
    kbd = await get_inline(
        btns={
            '–ü–∏—Å—å–º–æ (37)': 'mail@mail',
            '–≠—Å—Å–µ (38)': 'mail@essay',
            '–ù–∞–∑–∞–¥': 'choose_tamplate_tasks',
        },
        sizes=(1, 1, 1,)
    )
    await state.set_state(SolveTasksCategory.mails)
    await callback.message.edit_text(text=text, reply_markup=kbd)
    await callback.answer()


@user_router.callback_query(F.data.startswith('new@'), SolveTasksCategory.mails)
@user_router.callback_query(F.data.startswith('mail@'), SolveTasksCategory.mails)
async def send_mails_task(callback: CallbackQuery):
    await callback.message.delete()
    category = str(callback.data.split('@')[-1])
    task = await get_random_task(type=category)
    text = (
        f'<b>–ó–∞–¥–∞–Ω–∏–µ {task["id"]}</b> \n'
        '---------- \n'
        f'<blockquote>{task["descr"]}</blockquote>\n'
    )
    kbd = await get_inline(
        btns={
            '–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ üÜï': f'new@{category}',
            '–ù–∞–∑–∞–¥': 'part_mail',
        },
        sizes=(1, 1,)
    )
    await callback.message.answer(text=text, reply_markup=kbd)
    await callback.answer()


# * –í–µ—Ä–Ω–æ-–Ω–µ–≤–µ—Ä–Ω–æ —Ä–µ—à–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ
@user_router.callback_query(F.data == 'right')
async def solve_right(callback: CallbackQuery):
    await write_solve(uid=callback.from_user.id, solved=1, right_solved=1)
    await callback.answer(text='–ó–∞–ø–∏—Å–∞–Ω–æ')


@user_router.callback_query(F.data == 'wrong')
async def solve_wrong(callback: CallbackQuery):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback | {callback.from_user.id} | {callback.data} ")
    await write_solve(uid=callback.from_user.id, solved=1, right_solved=0)
    await callback.answer(text='–ó–∞–ø–∏—Å–∞–Ω–æ')


#! –ó–∞–≥–ª—É—à–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏
@user_router.callback_query(F.data == "check_by_expert")
async def check_by_expert(callback: CallbackQuery):
    text = ('üïì –°–∫–æ—Ä–æ —Å–¥–µ–ª–∞–µ–º, –ø–æ–∫–∞ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–µ –ø–∏—Å—å–º–æ —Å –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–π –Ω–µ–π—Ä–æ—Å–µ—Ç–∏!')
    kbd = await get_inline(
        btns={
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é ü§ñ": "check_by_ai",
            "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é": "main_menu",
        },
        sizes=(1,)
    )
    await callback.message.edit_text(text=text, reply_markup=kbd)
    await callback.answer()


@user_router.callback_query(F.data == "deposit")
async def deposit_start(callback: CallbackQuery):
    text = ('–°–∫–æ—Ä–æ, –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ üïì')
    kbd = await get_inline(
        btns={
            "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é": "main_menu",
        },
        sizes=(1,)
    )
    await callback.message.edit_text(text=text, reply_markup=kbd)
    await callback.answer()


@user_router.callback_query(F.data == "variant")
async def done_variants(callback: CallbackQuery):
    text = ('–°–∫–æ—Ä–æ, –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ üïì')
    kbd = await get_inline(
        btns={
            "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é": "main_menu",
        },
        sizes=(1,)
    )
    await callback.message.edit_text(text=text, reply_markup=kbd)
    await callback.answer()


@user_router.callback_query(F.data == "variant_random")
async def random_variant(callback: CallbackQuery):
    text = ('–°–∫–æ—Ä–æ, –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ üïì')
    kbd = await get_inline(
        btns={
            "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é": "main_menu",
        },
        sizes=(1,)
    )
    await callback.message.edit_text(text=text, reply_markup=kbd)
    await callback.answer()
